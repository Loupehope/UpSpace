#!/usr/bin/env python3

import sys, re
from subprocess import check_output
from sys import getdefaultencoding

getdefaultencoding()  # utf-8

regex_commit_style = '^(build|chore|ci|docs|feature|fix|perf|refactor|revert|style)(\(\S+\))?: .+'

success_title = 'SUCCESS'
success_color = '92m'

error_title = 'ERROR'
error_message = 'Incorrect commit message style!\nThe commit pattern:'
error_color = '91m'

commit_pattern = '    type(scope): message | type: message \n'
available_commit_types = ['build', 'chore', 'ci', 'docs', 'feature', 'fix', 'perf', 'refactor', 'revert', 'style']

is_GUI_client = False

def print_result_header(result_title, color): 
    if not is_GUI_client:
        print("[\033[96mcommit lint\033[00m] [\033[{}{}\033[00m]\n".format(color, result_title))

def print_error_message(): 
    print_result_header(error_title, error_color)
    print(error_message)

    if is_GUI_client:
        print(commit_pattern)
    else:
        print("\033[{}{}\033[00m".format("96m", commit_pattern))

    print_available_commit_types()

def print_available_commit_types():
    print("Available commit types:")

    for commit_type in available_commit_types:
        print("   - %s" %commit_type)

def write_commit_message(fh, commit_msg):
    fh.seek(0, 0)
    fh.write(commit_msg)

def lint_commit_message(fh, commit_msg):
    is_lint_success = re.findall(regex_commit_style, commit_msg)

    if is_lint_success:
        print_result_header(success_title, success_color)
        write_commit_message(fh, commit_msg)
        sys.exit(0)
    else:
        print_error_message()
        sys.exit(1)

def run_script():
    commit_msg_filepath = sys.argv[1]

    with open(commit_msg_filepath, 'r+') as fh:
        commit_msg = fh.read()
        lint_commit_message(fh, commit_msg)

try:
    sys.stdin = open("/dev/tty", "r")
    is_GUI_client = False
except:
    is_GUI_client = True

run_script()